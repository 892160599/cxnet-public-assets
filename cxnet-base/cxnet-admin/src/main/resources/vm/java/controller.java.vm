package ${packageName}.${className}.controller;

import java.util.List;
    #if($TreeName!='')
    import java.util.Map;

    import com.alibaba.fastjson.JSON;
    import com.alibaba.fastjson.JSONArray;
    import com.cxnet.common.utils.TreeUtil;
    #end
import lombok.extern.slf4j.Slf4j;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;
import com.cxnet.framework.aspectj.lang.annotation.Log;
import com.cxnet.framework.aspectj.lang.enums.BusinessType;
import ${packageName}.${className}.domain.${ClassName};
import ${packageName}.${className}.service.${ClassName}ServiceI;
import com.cxnet.framework.web.controller.BaseController;
import com.cxnet.common.constant.AjaxResult;
import com.cxnet.common.utils.poi.ExcelUtil;

import static com.cxnet.common.constant.AjaxResult.success;

/**
 * ${functionName}控制层
 *
 * @author ${author}
 * @date ${datetime}
 */
@Slf4j
@RestController
@Api(tags = "${functionName}")
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {

    @Autowired
    private ${ClassName}ServiceI ${className}Service;


    /**
     * 查询${functionName}集合
     *
     * @param ${className}  ${functionName}
     */
    @ApiOperation("查询${functionName}集合")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping
    public AjaxResult list${ClassName}(${ClassName} ${className}) {
        startPage();
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return success(getDataTable(list));
    }


    /**
     * 查询${functionName}明细
     *
     * @param id  ${functionName}ID
     */
    @ApiOperation("查询${functionName}明细")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:query')")
    @GetMapping("/{id}")
    public AjaxResult get${ClassName}(@PathVariable ${pkColumn.javaType} id) {
        return success(${className}Service.select${ClassName}ById(id));
    }

    /**
     * 新增${functionName}
     *
     * @param ${className}  ${functionName}
     */
    @ApiOperation("新增${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public AjaxResult add${ClassName}(@RequestBody ${ClassName} ${className}) {
        return toAjax(${className}Service.insert${ClassName}(${className}));
    }

    /**
     * 修改${functionName}
     *
     * @param ${className}  ${functionName}
     */
    @ApiOperation("修改${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:update')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public AjaxResult update${ClassName}(@Validated @RequestBody ${ClassName} ${className}) {
        return toAjax(${className}Service.update${ClassName}(${className}));
    }

    /**
     * 删除${functionName}
     *
     * @param id  ${functionName}ID
     */
    @ApiOperation("删除${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:delete')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping()
    public AjaxResult delete${ClassName}(${pkColumn.javaType}[]id) {
        return toAjax(${className}Service.delete${ClassName}ByIds(id));
    }

    /**
     * 导出${functionName}
     *
     * @param ${className}  ${functionName}
     */
    @ApiOperation("导出${functionName}")
    @PreAuthorize("@ss.hasPermi('${permissionPrefix}:export')")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PutMapping("/export")
    public AjaxResult export${ClassName}(${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        ExcelUtil<${ClassName}> util = new ExcelUtil<>(${ClassName}. class);
        return util.exportExcel(list, "${functionName}数据");
    }

    #if($TreeName!='')
        /**
         * 获取${functionName}下拉树列表
         */
        @ApiOperation("获取${functionName}下拉树列表")
        @GetMapping("/treeselect")
        public AjaxResult treeselect() {
            List<Map> list = ${className}Service.treeselectList();
            JSONArray objects = new TreeUtil().toTree(JSONArray.parseArray(JSON.toJSONString(list)), "id", "pid");
            return AjaxResult.success(objects);
        }
    #end

}
